vars: org/clulab/asist/grammars/vars.yml

rules:
  - name: close
    priority: ${ rulepriority }
    label: Close
    pattern: |
      trigger = [lemma=/(?i)^(${ close_triggers })/ & tag=/^V/]
      target: Infrastructure? = >dobj | >/nmod/

  - name: close_dem_pronoun
    priority: ${ rulepriority }
    label: Close
    pattern: |
      trigger = [lemma=/(?i)^(${ close_triggers })/ & tag=/^V/]
      target: DemPron? = >dobj

  - import: org/clulab/asist/grammars/lvo_template.yml
    vars:
      name: toggle
      template_priority: ${ rulepriority }
      label: Toggle
      trigger: ${ toggle_triggers }
      object_type: Switch

  - name: triage
    priority: ${ rulepriority }
    label: Save
    example: "I will save the victim"
    pattern: |
      trigger = [lemma=/(?i)^(${ triage_triggers })/]
      target: Victim = >dobj
      location: Location? = >/${ positional_preps_+advmod }/

  - name: triage2
    priority: ${ rulepriority }
    label: Save
    example: "I will save this guy"
    action: mkVictim
    pattern: |
      trigger = [lemma=/(?i)^(${ triage_triggers_strict })/]
      target: Person = >dobj
      location: Location? = >/${ positional_preps_+advmod }/
###need this because we split "person" from "victim"

  - name: triage3
    priority: ${ rulepriority }
    label: Save
    example: "I will save him"
    action: mkVictim
    pattern: |
      trigger = [lemma=/(?i)^(${ triage_triggers_strict })/]
      target: Entity = >dobj [tag=/PRP/]
      location: Location? = >/${ positional_preps_+advmod }/
## This one is not working right now, working on it -Remo

  - import: org/clulab/asist/grammars/lvo_template.yml
    vars:
      name: search
      template_priority: ${ rulepriority }
      label: Search
      trigger: ${ search_triggers }
      object_type: Location



  - name: search_infra_action
    priority: ${ rulepriority }
    label: Search
    action: mkVictim
    pattern: |
      trigger = [lemma=/${ search_triggers }/]
      area: Location = ${ search_relations }
      target: Concept? = >nmod_for

  - name: i_am_searching
    priority: ${ rulepriority }
    label: Search
    action: mkVictim
    pattern: |
      trigger = [lemma=/(?i)^(${ search_triggers })/ & tag=/^V/]
      person: Entity = >nsubj
      target: Concept? = >nmod_for

  # -------------------------------------------------------------------
  - name: move_nmod_action
    priority: ${ rulepriority }
    label: Move
    pattern: |
      trigger = [lemma=/(?i)^(${ moveto_triggers })$/ & tag=/^V/]
      target: Location? =  >/nmod_(into|through|to|toward|by|over|in_front_of|next_to)/
      person: Entity? = >/${agents}/

  - name: move_deixis_action
    priority: ${ rulepriority }
    label: Move
    pattern: |
      trigger = [lemma=/(?i)${ moveto_triggers }/]
      target: Deictic = >/nmod_(into|through|to|towards)/ | >advmod
      person: Entity? = >/${agents}/

  # ------------------------------------------------------------------- sight
  - import: org/clulab/asist/grammars/lvo_template.yml
    vars:
      name: sight_entity
      example: "I see the victim"
      template_priority: ${ rulepriority }
      label: Sight
      trigger: ${ sight_triggers }
      object_type: Entity

  - import: org/clulab/asist/grammars/lvo_template.yml
    vars:
      name: sight_item
      example: "I see the medkit"
      template_priority: ${ rulepriority }
      label: Sight
      trigger: ${ sight_triggers }
      object_type: Item

  - import: org/clulab/asist/grammars/lvo_template.yml
    vars:
      name: sight_event_like
      example: "I see the rubble"
      template_priority: ${ rulepriority }
      label: Sight
      trigger: ${ sight_triggers }
      object_type: EventLike


##----------------------------------------------------------------------------------------- clear

  - name: clear_rubble
    priority: ${ rulepriority }
    label: Clear
    pattern: |
      trigger = [lemma=/(?i)^(${ clear_triggers })/]
      agent: Entity? = >/${agents}/
      target: Rubble = >dobj

  - name: clear_rubble_token
    priority: ${ rulepriority }
    label: Clear
    type: token
    pattern: |
      @agent:Entity? [lemma=/(?i)^(${ clear_triggers })/] [tag=/P?DT/]* @target:Rubble

  - name: clear_location
    priority: ${ rulepriority }
    label: Clear
    pattern: |
      trigger = [lemma=/(?i)^(${ clear_triggers })/]
      agent: Entity? = >/${agents}/
      target: Location = >dobj

  - name: obstructing
    priority: ${ rulepriority }
    label: Block
    example: "Some rubble is blocking this door"
    pattern: |
      trigger = [lemma=/(?i)^(${ block_triggers })/ & tag=/^V/]
      source: Concept? = >/${agents}/
      target: Concept? = >/dobj|acl/

  - name: obstructing2
    priority: ${ rulepriority }
    label: Block
    pattern: |
      trigger = [lemma=/(?i)^(${ block_triggers })/ & tag=/^V/]
      source: Obstacle? =  <acl
      target: Concept? = >/dobj|acl/

  - name: obstructing_in_the_way
    priority: ${ rulepriority }
    label: Block
    pattern: |
      trigger = [lemma=/(?i)in/] [tag=/DT|PRP/] [lemma=/(?i)way/]
      source: Obstacle? = </nmod/ >/${agents}/
      target: Concept? = >nmod_of

  - name: obstructing_in_the_way2
    priority: ${ rulepriority }
    example: "There is a fire in the way of this door"
    label: Block
    pattern: |
      trigger = [lemma=/(?i)in/] [tag=/DT|PRP/] [lemma=/(?i)way/]
      source: Concept? = >/${agents}/
      target: Concept? = >nmod_of
