vars: org/clulab/asist/grammars/vars.yml

rules:
  - name: close
    priority: ${ rulepriority }
    label: Close
    pattern: |
      trigger = [lemma=/(?i)^(${ close_triggers })/ & tag=/^V/]
      target: Infrastructure? = >dobj | >/nmod/

  - name: close_dem_pronoun
    priority: ${ rulepriority }
    label: Close
    pattern: |
      trigger = [lemma=/(?i)^(${ close_triggers })/ & tag=/^V/]
      target: DemPron? = >dobj

#  - import: org/clulab/asist/grammars/lvo_template.yml
#    vars:
#      name: toggle
#      template_priority: ${ rulepriority }
#      label: Toggle
#      trigger: ${ toggle_triggers }
#      object_type: Switch

  - import: org/clulab/asist/grammars/lvo_template.yml
    vars:
      name: open
      template_priority: ${ rulepriority }
      label: Open
      trigger: ${ open_triggers }
      object_type: Infrastructure

  - import: org/clulab/asist/grammars/lvo_template_no_passive.yml
    vars:
      name: search
      template_priority: ${ rulepriority }
      label: Search
      trigger: ${ search_triggers_no_look }
      object_type: Location



  - name: search_infra_action
    priority: ${ rulepriority }
    label: Search
    action: mkVictim
    pattern: |
      trigger = (?<! [word=it] )[lemma=/${ search_triggers }/]
      area: Location = ${ search_relations }
      target: Concept? = >nmod_for
      agent: Entity? = >/${agents}/

  - name: i_am_searching
    priority: ${ rulepriority }
    label: Search
    action: mkVictim
    pattern: |
      trigger = (?<! [word=it] ) [lemma=/(?i)^(${ search_triggers })/ & tag=/^V/] (?! [word=out])
      agent: Entity = >/${agents}/
      target: Concept? = >nmod_for

  - name: take_a_look
    priority: ${ rulepriority }
    label: Search
    pattern: |
      trigger = (?<! [word=it] ) [lemma=take] [word=a]? [word=look]
      agent: Entity = >/${agents}/
      target: Location? = >/nmod/

  - name: sweep
    priority: ${ rulepriority }
    label: Search
    pattern: |
      trigger = (?<! [word=it] ) [lemma=sweep]
      agent: Entity? = >/${agents}/
      target: Location = >/nmod/

  - name: sweep_direction
    priority: ${ rulepriority }
    label: Search
    pattern: |
      trigger = (?<! [word=it] ) [lemma=sweep]
      agent: Entity? = >/${agents}/
      target: Direction = >/nmod/

  - name: sweep_token_loc
    priority: ${ genericpriority }
    label: Search
    type: token
    keep: true
    pattern: |
      (@agent:Entity)?  (?<trigger> [lemma=sweep &!mention=Search]) (@direction:Direction)? (@location:Location)

  - name: sweep_token_dir
    priority: ${ genericpriority }
    label: Search
    type: token
    keep: true
    pattern: |
      (@agent:Entity)?  (?<trigger> [lemma=sweep &!mention=Search]) (@direction:Direction) (@location:Location)?

  # ------------------------------------------------------------------- move
  - import: org/clulab/asist/grammars/movement.yml

  # ------------------------------------------------------------------- sight
  - import: org/clulab/asist/grammars/lvo_template.yml
    vars:
      name: sight_entity
      example: "I see the victim"
      template_priority: ${ rulepriority }
      label: Sight
      trigger: ${ sight_triggers }
      object_type: Entity

  - import: org/clulab/asist/grammars/lvo_template.yml
    vars:
      name: sight_item
      example: "I see the medkit"
      template_priority: ${ rulepriority }
      label: Sight
      trigger: ${ sight_triggers }
      object_type: Item

  - import: org/clulab/asist/grammars/lvo_template.yml
    vars:
      name: sight_event_like
      example: "I see the rubble"
      template_priority: ${ rulepriority }
      label: Sight
      trigger: ${ sight_triggers }
      object_type: EventLike

  - name: seeOnMap
    priority: ${ rulepriority }
    example: "I have a threatsign on my map"
    label: Sight
    pattern: |
      trigger = [lemma=/(?i)^have/]
      item: Item = >dobj
      map: Map = >dobj >nmod_on

  - name: obstructing
    priority: ${ rulepriority }
    label: Block
    example: "Some rubble is blocking this door"
    pattern: |
      trigger = (?<! [lemma=marker] ) [lemma=/(?i)^(${ block_triggers })/ & tag=/^V/]
      source: Concept? = >/${agents}/
      target: Concept? = >/dobj|acl/

  - name: obstructing2
    priority: ${ rulepriority }
    label: Block
    pattern: |
      trigger = (?<! [lemma=marker] ) [lemma=/(?i)^(${ block_triggers })/ & tag=/^V/]
      source: Obstacle? =  <acl
      target: Concept? = >/dobj|acl/

  - name: obstructing_in_the_way
    priority: ${ rulepriority }
    label: Block
    pattern: |
      trigger = [lemma=in] [tag=/DT|PRP/] [lemma=/(?i)^way\b/]
      source: Obstacle? = </nmod/ >/${agents}/
      target: Concept? = >nmod_of

  - name: obstructing_in_the_way2
    priority: ${ rulepriority }
    example: "There is a fire in the way of this door"
    label: Block
    pattern: |
      trigger = [lemma=in] [tag=/DT|PRP/] [lemma=/(?i)^way\b/]
      source: Concept? = >/${agents}/
      target: Concept? = >nmod_of
