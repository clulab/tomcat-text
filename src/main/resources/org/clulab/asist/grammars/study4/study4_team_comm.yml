vars: org/clulab/asist/grammars/vars.yml

rules:


  - name: "HelpRequests_simple_action"
    label: HelpRequest
    example: "I need help with defusing the bomb."
    priority: ${ rulepriority }
    pattern: |
      trigger = [word=/(?i)need|require/] []? [word=/(?i)help|assistance/ & tag=/NN|^VB$/]
      agent: Self? = >/${agents}/
      action: Action = >/advcl/|
                      >/acl/
      location: Location? = >/${preps}/|
               >/advmod/

  - name: "I_am_color"
    label: DeclareColor
    example: "I'm red"
    priority: ${ rulepriority }
    pattern: |
      trigger = [lemma=/^be$/]
      agent: Self = >/${agents}/ | <cop >nsubj
      color: Color = >/${objects}/ | <cop

  - name: "I_am_color player"
    label: DeclareColor
    example: "I'm red player"
    priority: ${ rulepriority }
    pattern: |
      trigger = [lemma=/^be$/]
      agent: Self = >/${agents}/ | <cop >nsubj
      color: Color = <cop >amod

  - name: "This_is_color"
    label: DeclareColor
    example: "This is red"
    priority: ${ rulepriority }
    type: token
    pattern: |
      (?<trigger> [lemma=this] [lemma=be]) (@color:Color)

  - name: "possess"
    label: ReportPossession
    example: "I have a tool"
    priority: ${ rulepriority }
    pattern: |
      trigger =  [lemma=/^have$/] | [word=got]
      agent: Entity? = >/${agents}/
      object: Product = >/${objects}/

  - name: "possess_number"
    label: ReportPossession
    example: "I have a 5"
    priority: ${ rulepriority }
    pattern: |
      trigger =  [lemma=/^have$/] | [word=got]
      agent: Entity? = >/${agents}/
      number: Number = >/${objects}/
      object: Item? = >/${objects}/ >nmod_of

  - name: "possess_coin"
    label: ReportPossession
    example: "I have 5 coins"
    priority: ${ rulepriority }
    pattern: |
      trigger = [lemma=/^have$/] | [word=got]
      agent: Entity? = >/${agents}/
      object: Coin = >/${objects}/

  - name: "out_of_product"
    label: OutOfThing
    example: "Welp, we are out of tools"
    priority: ${ rulepriority }
    pattern: |
      trigger = [lemma=/^be$/] [word=out] | [lemma=/^we.?re$/] [word=out] | [lemma=/^im$/] [word=out]
      agent: Entity? =  <cop >/${agents}/
      item: Product = >nmod_out_of | <cop

  - name: "out_of_coin"
    label: OutOfThing
    example: "Welp, we are out of coins"
    priority: ${ rulepriority }
    pattern: |
      trigger = [lemma=/^be$/] [word=out] | [lemma=/^we.?re$/] [word=out] | [lemma=/^im$/] [word=out]
      agent: Entity? =  <cop >/${agents}/
      item: Coin = >nmod_out_of | <cop

  - name: Im_out
    priority: ${ second_priority }
    label: OutOfThing
    type: token
    keep: true
    pattern: |
      (?<trigger> [word=am] [lemma=out & !mention=OutOfThing]) [!mention=Location]

  - name: "got_bomb"
    label: ReportBomb
    example: "I got a bomb"
    priority: ${ rulepriority }
    pattern: |
      trigger = [lemma=/^have$/] | [word=got]
      agent: Entity? = >/${agents}/
      exists: Bomb = >/${objects}/
      location: Location? = >/${preps}|advmod|${positional_preps}/|
               >/${agents}/
               >/${preps}/

  - name: found_bomb
    priority: ${ rulepriority }
    label: FindBomb
    example: "I found a bob."
    pattern: |
      trigger = [lemma=/(?i)^find$|^discover$/]
      exists: Bomb = >/${objects}/
      agent: Entity? = >/${agents}/
      location: Location? = >/${preps}|advmod|${positional_preps}/|
               >/${agents}/
               >/${preps}/|
              >dobj >/nmod/ >compound?
      map: Map? = >/${positional_preps}/

  ###################### Plans for study 4 live here for now
  - name: shall_should_plan
    priority: ${ rulepriority }
    example: "I should save this guy. I'll start going there"
    label: ShouldPlan
    action: preventSubjectVerbInversion
    pattern: |
      trigger = (?<! [mention=Question] ) [tag=/^MD/ & lemma=/^should|^shall$|^might$/]
      topic: Action = <aux >xcomp?
      agent: Entity? = <aux >nsubj

  - name: suggest_propose
    priority: ${ rulepriority }
    example: "I suggest we split up. I propose to buy a sensor"
    label: Proposal
    pattern: |
      trigger = (?<! [mention=Question] ) [tag=/^V/ & lemma=/^suggest|^propose$|^advocate$/]
      topic: Action = >xcomp| >ccomp
      agent: Entity? = <aux >nsubj

  - name: is_left2
    example: "5 tools are left"
    priority: ${ rulepriority }
    label: Remaining
    pattern: |
        trigger = [word=/^(left)|(remaining)$/]
        item: Item = >/nsubj/
        agent: Entity? = <ccomp >nsubj
  #      topic: Action = <amod <dobj | <advmod <dobj

  - name: is_left_bombs
    example: "5 bombs are left"
    priority: ${ rulepriority }
    label: Remaining
    pattern: |
      trigger = [word=/^(left)|(remaining)$/]
      bomb: Bomb = >/nsubj/
      agent: Entity? = <ccomp >nsubj
  #      topic: Action = <amod <dobj | <advmod <dobj

  - name: is_left_of
    example: "I have 5 left of the red tool"
    priority: ${ rulepriority }
    label: Remaining
    pattern: |
      trigger = [word=/^(left)|(remaining)$/]
      item: Item = >/nmod_of/
      agent: Entity? = <dobj >nsubj
      number: Number = >nummod | >amod | >det

  - name: is_left_of_bomb
    example: "I have 5 left of the red tool"
    priority: ${ rulepriority }
    label: Remaining
    pattern: |
      trigger = [word=/^(left)|(remaining)$/]
      bomb: Bomb = >/nmod_of/
      agent: Entity? = <dobj >nsubj
      number: Number = >nummod | >amod | >det

  - name: is_left_of_color
    example: "I have 5 left of the red tool"
    priority: ${ rulepriority }
    label: Remaining
    pattern: |
      trigger = [word=/^(left)|(remaining)$/]
      item: Color = >/nmod_of/
      agent: Entity? = <dobj >nsubj
      number: Number = >nummod | >amod | >det

  - name: is_left_obj
    example: "How many tools do we have left?"
    priority: ${ rulepriority }
    label: Remaining
    pattern: |
      trigger = [word=/^(left)|(remaining)$/]
      item: Item = >dobj
      agent: Entity? = <nsubj

  - name: is_left_obj_bomb
    example: "How many tools do we have left?"
    priority: ${ rulepriority }
    label: Remaining
    pattern: |
      trigger = [word=/^(left)|(remaining)$/]
      bomb: Bomb = >dobj
      agent: Entity? = <nsubj
  #      topic: Action = <amod <dobj | <advmod <dobj

# this is handled by Clear now
#  - name: take_area
#    example: "I will take that area"
#    priority: ${ rulepriority }
#    label: TakeZone
#    pattern: |
#     trigger = [lemma=/^(take)$|^(do)$/]
#      zone: Zone = >/dobj/
#      agent: Entity? =  >nsubj


  - name: vote_for
    priority: ${ rulepriority }
    label: VoteFor
    pattern: |
      trigger = [lemma=/(?i)^(vote)$/ & tag=/^V/] [word=/^(for)$/]
      for: Phase = >nmod_for
      agent: Entity? = >/${agents}/

  - name: vote_on
    priority: ${ rulepriority }
    label: Vote
    pattern: |
      trigger = [lemma=/(?i)^(vote)$/ & tag=/^V/] [word=/^(on)$/]
      for: Phase = >nmod_on
      agent: Entity? = >/${agents}/


  - name: vote
    priority: ${ rulepriority }
    label: Vote
    pattern: |
      trigger = [lemma=/(?i)^(vote)$/ & tag=/^V/]
      for: Phase = >dobj
      agent: Entity? = >/${agents}/

  - name: vote_token_for
    priority: ${ second_priority }
    label: VoteFor
    type: token
    keep: true
    pattern: |
      (?<trigger> [lemma=vote & !mention=Vote]) [word=for] (@for:Phase)

  - name: vote_token_on
    priority: ${ second_priority }
    label: VoteFor
    type: token
    keep: true
    pattern: |
      (?<trigger> [lemma=vote & !mention=Vote]) [word=on] (@on:Phase)

  - name: ready
    priority: ${ rulepriority }
    label: AmReady
    keep: true
    pattern: |
      trigger = [lemma=ready]
      agent: Entity = >nsubj

  - name: ready_bare
    priority: ${ rulepriority }
    label: AmReady
    example: "Ready when you are"
    keep: true
    type: token
    pattern: |
       (?<! []) [lemma=ready] (?!  []* [mention=Question & !lemma=when] )

  - name: "finish_task"
    label: Completed
    example: "I finished defusing the bomb."
    priority: ${ rulepriority }
    pattern: |
      trigger = [lemma=/^(finish|do|complete)$/ & tag=/VBD|VBN/]
      agent: Entity? = >/${agents}/
      target: Action = >dobj |>nmod_with

  - name: "flag_clear"
    label: FlagAreaClear
    example: "Flag 5 is clear"
    priority: ${ rulepriority }
    pattern: |
      trigger = [lemma=/^be$/] [word=clear]
      location: Flag = >nsubj


  - name: "unsure_of_event"
    label: Unsure
    example: "I believe I have 5 coins"
    priority: ${ rulepriority }
    pattern: |
      trigger = [lemma=/^(believe|think|assume)$/]
      agent: Entity? = >/${agents}/
      topic: Action = >ccomp

  - name: "dont know of event"
    label: Unsure
    example: "I believe I have 5 coins"
    priority: ${ rulepriority }
    pattern: |
      trigger = [lemma=/^do$/] [lemma=/^not$/] [lemma=/^(know)$/]
      agent: Entity? = >/${agents}/
      topic: Action = >/advcl/

  - name: contains_report
    priority: ${ rulepriority }
    label: ReportBomb
    example: "D2 contains a bomb."
    pattern: |
      trigger = [lemma=/(?i)^(contain|have)/]
      exists: Bomb = >dobj
      location: Location =  >/${agents}/

  - name: role_declare_inf
    priority: ${ rulepriority }
    label: RoleDeclare
    example: "Who will be on fire duty?"
    pattern: |
      trigger = [lemma=/(?i)^be/ & tag=VB] [!mention=/You|Self/]
      target: Role = <cop
      agent: Entity = <cop >/(${agents})/

  - name: role_declare_take
    priority: ${ rulepriority }
    label: RoleDeclare
    example: "I'll take fire duty"
    pattern: |
      trigger = [lemma=/(?i)^(take|do)/]
      target: Role = >dobj
      agent: Entity = >/(${agents})/

  - name: role_declare_take_care
    priority: ${ rulepriority }
    label: RoleDeclare
    example: "I'll take care of fire duty"
    pattern: |
      trigger = [lemma=/(?i)^(take)/] [lemma=/(?i)^(care)/]
      target: Role = >dobj | >/nmod/
      agent: Entity = >/(${agents})/


  - name: take_care_of_obstacle
    priority: ${ rulepriority }
    label: ResponsibleFor
    example: "I'll be in charge of fires"
    pattern: |
      trigger = [lemma=/(?i)^(in|take|responsible)/] [lemma=/(?i)^(charge|care|for)/]
      target: Obstacle = >dobj | >/nmod/
      agent: Entity = >/(${agents})/

  - name: take_care_of_action
    priority: ${ rulepriority }
    label: ResponsibleFor
    example: "I'll be in charge of fires"
    pattern: |
      trigger = [lemma=/(?i)^(in|take|responsible)/] [lemma=/(?i)^(charge|care|for)/]
      target: Action = >dobj | >/nmod/
      agent: Entity? = >/(${agents})/

  - name: take_care_of_item
    priority: ${ rulepriority }
    label: ResponsibleFor
    example: "I'll be in charge of fires"
    pattern: |
      trigger = [lemma=/(?i)^(in|take|responsible)/] [lemma=/(?i)^(charge|care|for)/]
      target: Item = >dobj | >/nmod/
      agent: Entity? = >/(${agents})/