#!/usr/bin/env python

# metadata2tsv
# ============
# This script processes one or more .metadata files (corresponding to dumps of
# message data from the message bus) and prints a tabular (TSV) representation
# of the ASR messages published on the 'agent/asr/final' topic contained in the
# files.

# Example usage
# -------------
#
#   ./metadata2tsv myDirectory/*.metadata > output.tsv


import sys
import json
from pathlib import Path
from dateutil.parser import parse
from dateutil.relativedelta import relativedelta
from logging import warning

if __name__ == "__main__":
    from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter

    parser = ArgumentParser(
        description="metadata2tsv",
        formatter_class=ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument(
        "input", type=str, nargs="+", help="Input .metadata files"
    )
    args = parser.parse_args()

    print(
        "\t".join(
            (
                "Team",
                "Trial",
                "trial_uuid",
                "CondBtwn",
                "CondWin",
                "timestamp",
                "relative_timestamp (mm:ss)",
                "participant_id",
                "text",
            )
        )
    )

    for filepath in args.input:

        # Parse the filename components
        path = Path(filepath)
        trial=filepath.rpartition("Trial-")[2].split("_")[0]
        team=str(int(filepath.rpartition("Team-")[2].split("_")[0][2:]))
        condbtwn=filepath.rpartition("CondBtwn-")[2].split("_")[0]
        condwin=filepath.rpartition("CondWin-")[2].split("_")[0]

        # Process the file
        with open(filepath) as f:
            initial_timestamp = None
            for i, line in enumerate(f):
                # We are only interested in the final transcriptions, not the
                # intermediate ones.
                try:
                    message = json.loads(line)
                except json.JSONDecodeError:
                    raise RuntimeError(
                            f"Unable to parse line {i+1} in {filepath} as JSON.\n"
                            + line
                            )

                if message["msg"]["sub_type"] == "start":
                    initial_timestamp = json.loads(line)["msg"]["timestamp"]

                if "topic" in message and message["topic"] == "agent/asr/final":
                    data = message["data"]
                    timestamp = message["msg"]["timestamp"]

                    try:
                        timedelta = relativedelta(parse(timestamp), parse(initial_timestamp))
                    except TypeError:
                        raise RuntimeError(
                                f"Unable to parse timestamps in line {i+1} in {filepath}\n"
                                +line+"\n"
                                +f"Initial timestamp: {initial_timestamp}\n"
                                +f"Timestamp: {timestamp}"
                                )
                    relative_timestamp = f"{timedelta.minutes}:{timedelta.seconds}"

                    if "text" in data and "is_final" in data:
                        text = data["text"]
                        participant_id = data["participant_id"]
                        trial_uuid = message["msg"]["trial_id"]
                        line = "\t".join(
                            (
                                team,
                                trial,
                                trial_uuid,
                                condbtwn,
                                condwin,
                                timestamp,
                                relative_timestamp,
                                participant_id,
                                text,
                            )
                        )
                        print(line)
