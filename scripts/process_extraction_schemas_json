#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Mar 24 22:37:32 2022

@author: CCloveHH
"""


#!/usr/bin/env python

# Script to generate compact extraction schemas documentation

import sys
import json
from datetime import datetime

input_file = sys.argv[1]
version_file = sys.argv[2]



def update_tree(tree_dict, names, arguments, keep):
    """
    Parse the extracted labels into a tree-like structure, labels are stored as key in tree_dict
    Parameters:
        tree_dict: dict
        names: list, extracted labels
        arguments: empty list if no arguments, or dict
        keep: True/False, whether the extraction is the only output as an argument of another extraction
    Return:
        None
    """
    if not names:
        tree_dict['Bool_for_bracket'] = keep
        if arguments: 
            tree_dict["arguments"] = arguments
        return  
    if names[0] not in tree_dict:
        tree_dict[names[0]] = {}
            
    update_tree(tree_dict[names[0]], names[1:], arguments, keep)
        
def print_tree_dict(tree_dict, level):
    """
    Print tree_dict in yml format
    Parameters:
        tree_dict: dict
        level: int, depth of the tree_dict, for indent purpose
    Return:
        None
    """
    
    for key in tree_dict:
        if key == "Bool_for_bracket": 
            continue
        elif key == "arguments":
            arguments = tree_dict['arguments']
            for arg in arguments:
                print(
                    "  " * level + "- " + arg,
                    f"({'|'.join(x for x in arguments[arg]['label(s)'])})",
                    f"({arguments[arg]['quantifier(s)']})".replace(
                        "`", ""
                    ).replace("_none_", ""),
                )
            print("")
        elif 'Bool_for_bracket' in tree_dict[key]:
            if tree_dict[key]['Bool_for_bracket'] == True:
                print('  ' * level + '- ' + key)
            else:
                print('  ' * level + '- ' + '[' + key + ']')
            print_tree_dict(tree_dict[key], level+1)
        else:
            print('  ' * level + '- ' + key)
            print_tree_dict(tree_dict[key], level+1)



# Version of the dialog agent for which this documentation is being
# generated.

with open(version_file) as f:
    agent_version = f.read().split()[-1].replace('"', "")

with open(input_file) as f:
    data = json.load(f)
    print(
        """\
ASIST Extraction Schemas
========================

Authors: Adarsh Pyarelal, Rebecca Sharp

Agent version: `{agent_version}`

Document generation timestamp (UTC): `{date}`

This is automatically generated documentation of the different entities and
events being extracted by the University of Arizona [Dialog
Agent](https://github.com/clulab/tomcat-text).

Format
------

The extractions are listed below.

The full path to the leaf node in the taxonomy is represented in a hierarchical 
structure, with each level indented from a new line. If the extraction is only 
output as an argument of another extraction, rather than as a standalone 
extraction, the name of the extraction is wrapped in square brackets (`[]`).

The argument of an extraction, if any, is listed below the extraction.  If the
the argument is optional, the name is enclosed in square brackets, it is an 
optional argument. The possible labels that can be assigned to the argument 
come next, enclosed in parentheses and separated by the `|` character. 
Finally, the third component of the argument line is a list of quantifiers,
separated by commas, and enclosed in
parentheses.

[Odin](https://github.com/clulab/processors) arguments can be quantified in
several ways. First, they may be optional (`?`), meaning that if they can be
added, given a particular sentence, they will be, but if not the Mention can
still be found. Further, they can be allowed to match multiple arguments. For
example, in the sentence Ferdinand ate ice cream and pop tarts., if you made a
rule to extract eating events and used a `+` quantifier with the food argument
`(food: Food+ = ...)`, then the Mention would have two separate arguments (ice
cream and pop tarts). The quantifiers you may see are:

- `?` (arg is optional)
- `+` (you need at least one, can have as many as are there)
- `(_min_, _max_)` (you need at least min and can have up to max, where min can be 0).

Take for example the following block:

```
-Concept
  -LeafNode
    - arg1 (LeafNode1|LeafNode2) ()
    - [arg2] (LeafNode3) (?)
```

The full path to the leaf node in the taxonomy is `Concept/LeafNode`. The
extraction has two arguments, `arg1` and `arg2`, with `arg2` being optional.
The 'arg1' argument can be labeled as either `LeafNode1` or `LeafNode2` (we
elide the full taxonomy paths here for clarity). Additionally, `arg2` has an
optional quantifier.

The extractions are documented in the following section.

Extractions
-----------

```
""".format(
            agent_version=agent_version, date=datetime.utcnow()
        )
    )

    tree_dict = {}
    
    for extraction in data:
        names = extraction["labels"][::-1]
        keep = any(set(extraction["keep"]))
        if extraction["argumentsPerRule"]:
            arguments = dict()
            for rule_argument in extraction["argumentsPerRule"]:
                for arg in rule_argument:
                    required = arg["required"]
                    arg_str = arg["name"] if required else f"[{arg['name']}]"
                    if arg_str not in arguments:
                        arguments[arg_str] = {
                            "label(s)": {arg["label"]},
                            "quantifier(s)": arg["quantifier"],
                        }
                    else:
                        arguments[arg_str]["label(s)"].add(arg["label"])
        else: arguments = []
        update_tree(tree_dict, names, arguments, keep)
        
    print_tree_dict(tree_dict, 0)
            

    # Close markdown code block
    print("```")
