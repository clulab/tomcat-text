#!/usr/bin/env python

# Script to generate compact extraction schemas documentation

import sys
import json
from datetime import datetime


def update_tree(tree_dict, names, arguments, keep):
    """
    Parse the extracted labels into a tree-like structure, labels are stored as key in tree_dict
    Parameters:
        tree_dict: dict
        names: list, extracted labels
        arguments: empty list if no arguments, or dict
        keep: True/False, whether the extraction is the only output as an argument of another extraction
    Return:
        None
    """
    if not names:
        tree_dict['Bool_for_bracket'] = keep
        if arguments:
            tree_dict["arguments"] = arguments
        return
    if names[0] not in tree_dict:
        tree_dict[names[0]] = {}

    update_tree(tree_dict[names[0]], names[1:], arguments, keep)

def write_tree_dict_html(tree_dict, level):
    """
    Print tree_dict in yml format
    Parameters:
        tree_dict: dict
        level: int, depth of the tree_dict, for indent purpose
    Return:
        None
    """
    marginleft = 3
    prefix = '"""'
    suffix = '"""'
    html_code = ""
    for key in tree_dict:
        if key == "Bool_for_bracket":
            continue
        elif key == "arguments":
            arguments = tree_dict['arguments']
            html_code += '<ul style="list-style-type:disc;">'
            for arg in arguments:
                argument_labels = '|'.join(f"<span class=\"label\">{x}</span>" for x in arguments[arg]['label(s)'])
                argument_name = f"<span class=\"argument-name\">{arg}</span>"
                html_code += f"<li> {argument_name} ({argument_labels})" + \
                    f" ({arguments[arg]['quantifier(s)']})".replace(
                        "`", ""
                    ).replace("_none_", "") + \
                    '</li>\n'
            html_code += "</ul>"
        elif 'Bool_for_bracket' in tree_dict[key]:
            label = key if tree_dict[key]['Bool_for_bracket'] == True else f"[{key}]"
            #check if this is a parent or not
            if len(tree_dict[key]) == 1:
                html_code += f"<li><span class=\"label\">{label}</span></li>\n"
            #if a parent
            else:
                html_code += f"""
                <button type="button" class="parent label">{label}</button>
                <div class="content">\n
                """
                html_code  += write_tree_dict_html(tree_dict[key], level+1)
                html_code += '</div>\n'
        else:
            if len(tree_dict[key]) == 1:
                html_code += '<li>{key}</li>\n'
            #if a parent
            else:
                html_code += '<button type="button" class="parent label">' + key + '</button>\n'
                html_code += '<div class="content">\n'
                html_code  += write_tree_dict_html(tree_dict[key], level+1)
                html_code += '</div>\n'


    return eval(prefix + html_code + suffix)



def generate_html(input_file: str, tree_dict, agent_version, output_file: str):
    # Write to HTML file
    date=datetime.utcnow()
    with open(input_file) as f:
        with open(output_file, "w") as html_file:
            html_code_part1 = """
                <html>
                    <head>
                        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto">
                        <style>
                            p {
                                font-size: 18px;
                                font-family: 'Roboto';
                                margin-top: 25px;
                            }
                            .navigation-container {
                                display: flex;
                                flex-direction: column;
                                background-color: #2A404E;
                                color: white;
                                height: 30%;
                                font-family: sans-serif;
                            }
                            .top-container{
                                display: flex;
                                justify-content: space-between;
                            }
                            .asist {
                                font-size: 30px;
                                margin: 20px;
                            }
                            .hyperlink-container {
                                display: flex;
                                gap: 20px;
                                margin: 20px;
                            }
                            .lower-container {
                                background-color: white;
                                margin-left: 15%;
                                margin-right: 15%;
                                color: #29404F;
                                font-family: 'Roboto';
                            }
                            .basic-info-container {
                                margin-top: 40px;
                                margin-bottom: 40px;
                                font-size: 16px;
                                font-family: 'Roboto';
                            }
                            .basic-info-container > div {
                                margin-top: 15px;
                            }
                            h1 {
                                text-align: center;
                            }

                            .argument-name {
                                color: red;
                                font-size: 15px;
                            }

                            .label {
                                color: blue;
                                font-size: 15px;
                            }

                            .parent {
                                cursor: pointer;
                                padding-bottom: 5px;
                                background-color: white;
                                width: 100%;
                                border: none;
                                text-align: left;
                                outline: none;
                                font-size: 15px;
                            }

                            .content {
                                padding: 0 18px;
                                display: none;
                                overflow: hidden;
                            }

                            .parent:after {
                                content: '\\02795';
                                /* Unicode character for "plus" sign (+) */
                                font-size: 13px;
                                color: white;
                                float: left;

                            }

                            .active:after {
                                content: "\\2796";
                                /* Unicode character for "minus" sign (-) */
                            }

                            button {
                                color: #29404F;
                            }
                            button:hover {
                                text-decoration:underline;
                                font-weight:bold;
                            }



                            li {
                                list-style-type: none;
                            }

                            li::before {
                                content: '\\2796';
                                display: inline-block;
                                margin-left: 5px;
                            }

                            .special-character {
                                font-family: monospace;
                            }
                        </style>
                        <body>
                            <div class='navigation-container'>
                                <div class='top-container'>
                                    <div class='asist'>ASIST</div>
                                    <div class='hyperlink-container'>
                                        <div>
                                            <a href='https://ml4ai.github.io/tomcat/' style="color: white; text-decoration: none;">ToMCAT</a>
                                        </div>
                                        <div>
                                            <a href='https://github.com/clulab/tomcat-text' style="color: white; text-decoration: none;">Github</a>
                                        </div>
                                    </div>
                                </div>
                                <h1>ASIST Extraction Schemas</h1>
                            </div>
                            <div class='lower-container'>
                                <div class='basic-info-container'>
                                    <div>Authors: Adarsh Pyarelal, Rebecca Sharp</div>
                                    <div>Agent version: """ + agent_version + """</div>
                                    <div>Document generation timestamp (UTC): """ + str(date) + """</div>
                                    <div>This is automatically generated documentation of the different entities and
                                    events being extracted by the University of Arizona <a href='https://github.com/clulab/tomcat-text'>Dialog Agent</a></div>
                                </div>
                                <h2> Format </h2>
                                <p>
                                    The extractions are listed below.
                                </p>
                                <p>
                                    The full path to the leaf node in the taxonomy is represented in a hierarchical
                                    structure, with each level indented from a new line. If the extraction is only
                                    output as an argument of another extraction, rather than as a standalone
                                    extraction, the name of the extraction is wrapped in square brackets ([]).
                                </p>
                                <p>
                                    The argument of an extraction, if any, is listed below the extraction.  If the
                                    the argument is optional, the name is enclosed in square brackets, it is an
                                    optional argument. The possible labels that can be assigned to the argument
                                    come next, enclosed in parentheses and separated by the | character.
                                    Finally, the third component of the argument line is a list of quantifiers,
                                    separated by commas, and enclosed in
                                    parentheses.
                                </p>
                                <p>
                                    <a href='https://github.com/clulab/processors'>Odin</a> arguments can be quantified in
                                    several ways. First, they may be optional (<span class='special-character'>?</span>), meaning that if they can be
                                    added, given a particular sentence, they will be, but if not the Mention can
                                    still be found. Further, they can be allowed to match multiple arguments. For
                                    example, in the sentence <i>"Ferdinand ate ice cream and pop tarts."</i>", if you made a
                                    rule to extract eating events and used a <span class='special-character'>+</span> quantifier with the food argument
                                    <span class='special-character'>(food: Food+ = ...)</span>, then the Mention would have two separate arguments (ice
                                    cream and pop tarts). The quantifiers you may see are:
                                </p>
                                </p>
                                <p>
                                    <ul style="list-style-type: none;">
                                        <li> <span class='special-character'>?</span> (arg is optional)</li>
                                        <li> <span class='special-character'>+</span> (you need at least one, can have as many as are there)</li>
                                        <li> <span class='special-character'>(_min_, _max_)</span> (you need at least min and can have up to max, where min can be 0).</li>
                                    </ul>
                                </p>
                                <p>
                                    Take for example the following block:
                                    <ul style="list-style-type: none;">
                                        <li><span class="label">Concept</span></li>
                                        <li style="margin-left: 15px;">  <span class="label">LeafNode</span>
                                            <li style="margin-left: 25px;">
                                            <span class='argument-name' >arg1</span> (<span class="label">LeafNode1</span>|<span class="label">LeafNode2</span>) () </li>
                                            <li style="margin-left: 25px;"> <span class='argument-name' >[arg2]</span> (<span class="label">LeafNode3<span>) (?) </li>
                                        </li>
                                    </ul>
                                    <p>
                                        The full path to the leaf node in the taxonomy is <span class='special-character'>Concept/LeafNode</span>.
                                        The extraction has two arguments,
                                        <span class='special-character'>arg1</span> and <span class='special-character'>arg2</span>,
                                        with <span class='special-character'>arg2</span> being optional.
                                        The <span class='special-character'>arg1</span> argument can be labeled as either
                                        <span class='special-character'>LeafNode1</span> or <span class='special-character'>LeafNode2</span> (we
                                        elide the full taxonomy paths here for clarity). Additionally, <span class='special-character'>arg2</span> has an
                                        optional quantifier.

                                        The extractions are documented in the following section.
                                    </p>
                                </p>
                                <h2>Extractions</h2>
                                <p style="margin-bottom: 40px">Note: '+' denotes the presence of child nodes; '-' indicates that the node is a leaf node with no child nodes.</p>

            """
            html_code_part2 = write_tree_dict_html(tree_dict, level=0)
            html_code_part3 = """
                </div>
                <script>
                    var parents = document.getElementsByClassName('parent');
                    for (var i = 0; i < parents.length; i++) {
                        parents[i].addEventListener("click", function () {
                            this.classList.toggle("active");
                            var content = this.nextElementSibling;
                            if (content.style.display === "block") {
                                content.style.display = "none";
                            } else {
                                content.style.display = "block";
                        }
                    })
                    }
                </script>
            """
            html_file.write(html_code_part1 +
                            html_code_part2 +
                            html_code_part3 +
                            """
                        </body>
                    </head>
                </html>
            """
            )

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument("input", help="Input extraction schemas JSON file")
    parser.add_argument("version", help="version file")
    parser.add_argument("output", help="Output file")
    args = parser.parse_args()

    input_file = args.input
    version_file = args.version

    # Version of the dialog agent for which this documentation is being
    # generated.

    with open(args.version) as f:
        agent_version = f.read().split()[-1].replace('"', "")

    tree_dict = {}

    with open(input_file) as f:
        data = json.load(f)

    for extraction in data:
        names = extraction["labels"][::-1]
        keep = any(set(extraction["keep"]))
        if extraction["argumentsPerRule"]:
            arguments = dict()
            for rule_argument in extraction["argumentsPerRule"]:
                for arg in rule_argument:
                    required = arg["required"]
                    arg_str = arg["name"] if required else f"[{arg['name']}]"
                    if arg_str not in arguments:
                        arguments[arg_str] = {
                            "label(s)": {arg["label"]},
                            "quantifier(s)": arg["quantifier"],
                        }
                    else:
                        arguments[arg_str]["label(s)"].add(arg["label"])
        else: arguments = []
        update_tree(tree_dict, names, arguments, keep)

    generate_html(input_file, tree_dict, agent_version, args.output)
